datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

// This generator is used to provide type information to Pothos.
generator pothos {
  provider = "prisma-pothos-types"
}

enum Plan {
  Free
  Standard
  Enterprise
}

model User {
  pk Int    @id @default(autoincrement())
  id String @unique @default(uuid()) @db.Uuid

  name       String
  email      String  @unique
  password   String
  isVerified Boolean @default(false)
  plan       Plan    @default(Free)

  registerIp String?
  userAgent  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session       Session[]
  passwordReset PasswordReset[]
  workspace     Workspace[]
}

model Session {
  id             String  @id @default(uuid()) @db.Uuid
  browser        String?
  browserVersion String?
  os             String?
  platform       String?
  userAgent      String?

  isExpired Boolean  @default(false)
  expiresAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userPk], references: [pk], onDelete: Cascade, onUpdate: NoAction)
  userPk Int
}

model PasswordReset {
  id        String  @id @default(uuid()) @db.Uuid
  isExpired Boolean @default(false)

  createdAt DateTime @default(now())
  expiresAt DateTime

  user   User @relation(fields: [userPk], references: [pk])
  userPk Int
}

enum WorkspaceTypes {
  Personal
  Organization
}

model Workspace {
  pk Int    @id @default(autoincrement())
  id String @unique @default(uuid()) @db.Uuid

  type WorkspaceTypes
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  opening Opening[]

  owner  User @relation(fields: [userPk], references: [pk], onDelete: Cascade, onUpdate: NoAction)
  userPk Int
}

model Opening {
  pk          Int     @id @default(autoincrement())
  id          String  @unique @default(uuid()) @db.Uuid
  name        String
  description String? @db.Text
  isArchived  Boolean @default(false)

  candidates Candidate[]

  workspace   Workspace @relation(fields: [workspacePk], references: [pk])
  workspacePk Int
}

model Candidate {
  pk     Int     @id @default(autoincrement())
  id     String  @unique @default(uuid()) @db.Uuid
  name   String
  email  String?
  phone  String?
  resume String?

  opening   Opening? @relation(fields: [openingPk], references: [pk], onDelete: Cascade, onUpdate: NoAction)
  openingPk Int?
}

model Interview {
  pk   Int    @id @default(autoincrement())
  id   String @unique @default(uuid()) @db.Uuid
  name String

  questions     Question[]
  preInterview  PreInterview[]
  postInterview PostInterview[]
}

model PreInterview {
  duration     Int     @db.SmallInt
  instructions String? @db.Text
  active       Boolean @default(true)

  interview   Interview @relation(fields: [interviewPk], references: [pk], onDelete: Cascade, onUpdate: NoAction)
  interviewPk Int       @id

  @@index([interviewPk])
}

model PostInterview {
  duration     Int     @db.SmallInt
  instructions String? @db.Text
  active       Boolean @default(true)

  interview   Interview @relation(fields: [interviewPk], references: [pk], onDelete: Cascade, onUpdate: NoAction)
  interviewPk Int       @id

  @@index([interviewPk])
}

model Question {
  pk       Int     @id @default(autoincrement())
  content  String
  skill    String? @db.VarChar(100)
  duration Int     @db.SmallInt

  questionEvaluation QuestionEvaluation[]

  interviewId Interview @relation(fields: [interviewPk], references: [pk], onDelete: Cascade, onUpdate: NoAction)
  interviewPk Int
}

model QuestionEvaluation {
  content String @db.Text

  question   Question? @relation(fields: [questionPk], references: [pk], onDelete: Cascade, onUpdate: NoAction)
  questionPk Int

  @@id([questionPk])
}
