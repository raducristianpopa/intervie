type CodedError implements CodedErrorInterface {
  code: String!
  message: String!
  validation: ErrorExtension!
}

interface CodedErrorInterface {
  code: String!
  message: String!
  validation: ErrorExtension!
}

scalar DateTime

interface Error {
  message: String!
}

scalar ErrorExtension

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  logIn(input: LogInInput!): MutationLogInResult!
  logOut: Result!
  signUp(input: SignUpInput!): MutationSignUpResult!
}

union MutationLogInResult = CodedError | MutationLogInSuccess | ZodError

type MutationLogInSuccess {
  data: User!
}

union MutationSignUpResult = CodedError | MutationSignUpSuccess | ZodError

type MutationSignUpSuccess {
  data: User!
}

type Query {
  viewer: User
  workspaces: [Workspace!]
}

enum Result {
  SUCCESS
}

input SignUpInput {
  confirmPassword: String!
  email: String!
  name: String!
  password: String!
}

type User {
  email: String!
  id: ID!
  name: String!
}

type Workspace {
  id: ID!
  name: String!
  openingsCount: Int!
  type: WorkspaceTypes!
}

enum WorkspaceTypes {
  Organization
  Personal
}

type ZodError implements Error {
  errors: [ZodFieldError!]!
  message: String!
}

type ZodFieldError {
  message: String!
  path: [String!]!
}