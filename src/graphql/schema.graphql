type CodedError implements CodedErrorInterface {
  code: String!
  message: String!
  validation: ErrorExtension!
}

interface CodedErrorInterface {
  code: String!
  message: String!
  validation: ErrorExtension!
}

scalar DateTime

interface Error {
  message: String!
}

scalar ErrorExtension

type Mutation {
  signUp(input: SignUpInput!): MutationSignUpResult!
}

union MutationSignUpResult = CodedError | MutationSignUpSuccess | ZodError

type MutationSignUpSuccess {
  data: User!
}

type Query {
  viewer: User
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

type User {
  email: String!
  id: String!
  name: String!
}

type ZodError implements Error {
  errors: [ZodFieldError!]!
  message: String!
}

type ZodFieldError {
  message: String!
  path: [String!]!
}